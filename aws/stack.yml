AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  RootDomainName:
    Description: Domain name for your website
    Type: String

Resources:

  Cert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref "RootDomainName"
      DomainValidationOptions:
      - DomainName: !Ref "RootDomainName"
        ValidationDomain: !Ref "RootDomainName"

# cloudfront
  Cdn:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              Fn::GetAtt: [ "WebBucket", "DomainName" ]
            Id: DIGITALKAOZ
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join: [ "", [ "origin-access-identity/cloudfront/", !Ref "S3AccessIdentity"] ]
        Enabled: 'true'
        DefaultRootObject: index.html
        HttpVersion: http2
        #Logging:
        #  IncludeCookies: 'false'
        #  Bucket: !Ref "LogBucket"
        #  Prefix: cf
        Aliases:
          - !Ref "RootDomainName"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: DIGITALKAOZ
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref "Cert"
          SslSupportMethod: sni-only

# security
  S3AccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "cf_to_s3"

  CdnS3Policy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "WebBucket"
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join: [ "", ["arn:aws:s3:::", !Ref "WebBucket", "/*" ]]
            Principal:
                CanonicalUser:
                  Fn::GetAtt: [ "S3AccessIdentity", "S3CanonicalUserId" ]

# s3
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref "RootDomainName"
      AccessControl: BucketOwnerFullControl
      #LoggingConfiguration:
      #  DestinationBucketName: !Ref 'LogBucket'
      #  LogFilePrefix: s3
      #WebsiteConfiguration:
      #  IndexDocument: index.html
      #  ErrorDocument: 404.html

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join: [ ".", ["logs", !Ref "RootDomainName" ] ]
      AccessControl: LogDeliveryWrite




  #BuildBucket:
  #  Type: AWS::S3::Bucket
  #  Properties:
  #    AccessControl: BucketOwnerFullControl

# code pipeline
#  Pipeline:
#    Type: "AWS::CodePipeline::Pipeline"
#    Properties:
#      ArtifactStore: !Ref "WebBucket"
#      Name: !Ref "RootDomainName"
#      RestartExecutionOnUpdate: "false"
#      #TODO
#      RoleArn:
#        Ref: ServiceRole
#      RoleArn: "AWS-CodePipeline-Service"
#      Stages:
#        -
#          Name: Source
#          ArtifactStore:
#            Type: S3
#            Location: !Ref "BuildBucket"
#          Actions:
#            -
#              Name: Source
#              Actions:
#                -
#                  Name: "Checkout"
#                  ActionTypeId:
#                    Category: Source
#                    Owner: "ThirdParty"
#                    Version: 1
#                    Provider: "Github"
#                  Configuration:
#                    Owner: digitalkaoz
#                    Repo: digitalkaoz.github.io
#                    PollForSourceChanges: "true"
#                    Branch: master
#                    OAuthToken: "true"
#                  OutputArtifacts:
#                    -
#                      Name: SourceOutput
#                  RunOrder: 1
#            -
#              Name: Build
#              Actions:
#                -
#                  Name: Build
#                  InputArtifacts:
#                    -
#                      Name: SourceOutput
#                  ActionTypeId:
#                    Category: Build
#                    Owner: AWS
#                    Version: 1
#                    Provider: CodeBuild
#                  #Configuration:
#                    #
#                  OutputArtifacts:
#                    -
#                      Name: BuildOutput
#                  RunOrder: 1
#
## security role AWS-CodePipeline-Service
#
## code build
#
#  CodeBuild:
#    Type: "AWS::CodeBuild::Project"
#    Properties:
#      Name: FN::Replace [".", "_", !Ref "RootDomainName"]
#      ServiceRole: !GetAtt "ServiceRole.Arn"
#      Artifacts:
#        Type: no_artifacts
#      Environment:
#        Type: LINUX_CONTAINER
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: node:alpine
##        EnvironmentVariables:
##          - Name: varName
##            Value: varValue
#      Source:
#        Location: !Ref "BuildBucket"
#        Type: S3
#      TimeoutInMinutes: 10
##      Tags:
##        - Key: Key1
##          Value: Value1

#
#  ServiceRole:
#    Type: "AWS::IAM::Role"
#    Properties:
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            -
#              Effect: "Allow"
#              Principal:
#                Service:
#                  - "codedeploy.eu-west-1.amazonaws.com"
#                  - "codedeploy.eu-west-2.amazonaws.com"
#                  - "codedeploy.eu-central-1.amazonaws.com"
#              Action:
#                - "sts:AssumeRole"
#        Path: "/"
#
#  RolePolicies:
#    Type: "AWS::IAM::Policy"
#    Properties:
#      PolicyName: "root"
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          -
#            Effect: "Allow"
#            Action: "*"
#            Resource: "*"
#      Roles:
#        -
#          Ref: "ServiceRole"
#
